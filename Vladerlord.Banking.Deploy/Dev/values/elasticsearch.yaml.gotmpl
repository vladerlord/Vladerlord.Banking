replicas: 1
minimumMasterNodes: 1
clusterHealthCheckParams: 'wait_for_status=yellow&timeout=1s'
protocol: https
resources:
  requests:
    cpu: "100m"
    memory: "500M"
  limits:
    cpu: "500m"
    memory: "2Gi"
volumeClaimTemplate:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 10Gi
extraEnvs:
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elasticsearch-credentials
        key: password
  - name: ELASTIC_USERNAME
    valueFrom:
      secretKeyRef:
        name: elasticsearch-credentials
        key: username
esConfig:
  elasticsearch.yml: |
    xpack.security.enabled: true
    #xpack.security.authc.realms.pki1.type: pki    
    
    # for outer access(like kibana)
    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs-gen/elastic-certificates.p12
    xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs-gen/elastic-certificates.p12
    # betweeen elastic nodes
    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.verification_mode: full
    xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs-gen/elastic-certificates.p12
    xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs-gen/elastic-certificates.p12
  
    ingest.geoip.downloader.enabled: false

# share generated cert
extraVolumes:
  - name: elasticsearch-certificates-pvc
    persistentVolumeClaim:
      claimName: elasticsearch-certificates-pvc

## for the generated cert
extraVolumeMounts:
  - name: elasticsearch-certificates-pvc
    mountPath: /usr/share/elasticsearch/config/certs-gen

# define container to build the cert
extraInitContainers:
  - name: setup-tls-cert
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.3"
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        rm -f /usr/share/elasticsearch/config/certs-gen/*

        elasticsearch-certutil cert \
          --name ${NODE_NAME} \
          --days 1000 \
          --ip ${POD_IP} \
          --dns ${POD_SERVICE_NAME}.${POD_NAMESPACE_NAME}.svc.cluster.local,${POD_SERVICE_NAME_HEADLESS}.${POD_NAMESPACE_NAME}.svc.cluster.local \
          --ca-cert /usr/share/elasticsearch/config/certs/tls.crt \
          --ca-key /usr/share/elasticsearch/config/certs/tls.key  \
          --ca-pass "" \
          --pass "" \
          --out /usr/share/elasticsearch/config/certs-gen/elastic-certificates.p12
    env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: POD_SERVICE_NAME
        value: "elasticsearch-master"
      - name: POD_NAMESPACE_NAME
        value: {{ .Values.dev.namespace }}
      - name: POD_SERVICE_NAME_HEADLESS
        value: "elasticsearch-master-headless"
    volumeMounts:
      - name: elasticsearch-certificates-secret
        mountPath: /usr/share/elasticsearch/config/certs
      - name: elasticsearch-certificates-pvc
        mountPath: /usr/share/elasticsearch/config/certs-gen

# mount the CA from secret
secretMounts:
  - name: elasticsearch-certificates-secret
    secretName: elasticsearch-tls
    path: /usr/share/elasticsearch/config/certs
